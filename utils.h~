#ifndef BASE64_UTILS_H
#define BASE64_UTILS_H

#include <string.h>

void *revers(char *s);
void dtobin(int d, char *buf);
unsigned int bintod(char *buf);
void encode_b64(char *dest, char *buf);

static char base64_tbl[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";


//
// function impelementation
//


/*
 * reverse given string
 */
void *revers(char *s)
{
    char c;
    size_t len = strlen(s);
    
    char *i = s;
    char *j = i + len - 1;

    while (i < j) {
	c = *i;
	*i = *j;
	*j = c;
	
	++i;
	--j;
    }
}

/*
 * convert decimal integer into binary
 * string representation and store the
 * result in buf in reverse order
 */
void dtobin(int d, char *buf)
{
    char revers_buf[32];
    int i = 0;
    int j = 0;
    
    while (d) {
	if (d % 2 == 0)
	    revers_buf[i++] = '0';
	else
	    revers_buf[i++] = '1';

	d /= 2;
	++j;
    }

    while (j++ < 8)
	revers_buf[i++] = '0';
    
    revers_buf[i] = '\0';
    
    revers(revers_buf);
    strcat(buf, revers_buf);
}

/*
 * convert binary string representation
 * into decimal integer
 */
unsigned int bintod(char *buf)
{
    int len = strlen(buf);
    unsigned int sum = 0;

    char *j = buf + len - 1;

    for (int i = len - 1; i >= 0; --i)
	if (*j-- == '1')
	    sum += 1 << len - i - 1;

    return sum;
}

/*
 * encode buf to base64 and store the result
 * in dest
 */
void encode_b64(char *dest, char *buf)
{
    unsigned int len = strlen(buf);
    char binstr[32];

    for (int i = 0; i < len; ++i) {
	dtobin(buf[i], binstr);
	strcat(dest, binstr);
	binstr[0] = '\0';
    }
    *(++dest) = '\0';
}

#endif
